# yaml-language-server: $schema=https://raw.githubusercontent.com/julep-ai/julep/refs/heads/dev/schemas/create_task_request.json
name: "Wikipedia Research Task" # Consistent Name
description: "You are Research Assistant. Your primary goal is to provide accurate and concise information based on user requests using Wikipedia."

input_schema:
  type: object
  properties:
    topic:
      type: string
      description: The topic to search for on Wikipedia.
    output_format:
      type: string
      description: The format of the response ("summary", "bullet points", "short report").
      # Added enum for stricter validation
      enum: ["summary", "bullet points", "short report"]
  required:
    - topic
    - output_format

tools:
  - name: wikipedia # Tool name used in the 'tool' step below
    type: integration
    integration:
      provider: wikipedia
    # No 'setup' needed here if using the standard Wikipedia integration

main:
  # Step 0: Call the Wikipedia tool with the input topic
  - tool: wikipedia
    arguments:
      # Assuming the tool takes a 'query' or 'page' argument.
      # Use 'query' as a common standard. Check Julep's specific tool docs if needed.
      query: $ steps[0].input.topic

  # Step 1: Process the Wikipedia content from Step 0 using the LLM (Agent)
  - prompt:
      - role: system
        # Use Python expression to dynamically generate the system prompt content
        # This ensures only the relevant formatting instruction is given to the LLM
        content: >-
          $ f'''You are {agent.name if agent else 'a research assistant'}.
          Your task is to take the provided Wikipedia content about the topic "{steps[0].input.topic}" and format it *only* as a "{steps[0].input.output_format}".
          Base your response *strictly* on the provided Wikipedia text below.
          {
              # Conditional formatting instructions: Only include the one requested
              "Adhere precisely to the following format requirement:\n" +
              ("- 'summary': Provide only a 3-4 sentence summary." if steps[0].input.output_format == 'summary' else "") +
              ("- 'bullet points': Provide only a maximum of 5 concise bullet points using '*'. " if steps[0].input.output_format == 'bullet points' else "") +
              ("- 'short report': Provide only a coherent text report under 150 words." if steps[0].input.output_format == 'short report' else "")
          }
          If the provided Wikipedia content is empty, indicates an error (like 'page not found'), or is insufficient to fulfill the request, state that clearly instead of generating the requested format.'''

      - role: user
        # Access the output of the previous step (step 0 - the tool call)
        # Handle potential None or empty output from the tool gracefully
        content: >-
          $ f'''Provided Wikipedia Content for topic "{steps[0].input.topic}":
          ---
          {steps[0].output if steps[0].output else "No content found or error fetching content."}
          ---

          Please format this content strictly as a "{steps[0].input.output_format}".'''
    # Ensure the direct text response from the LLM is the final output of this step and the task
    unwrap: true
